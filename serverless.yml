service: lmorchard-sqs-worker-serverless

plugins:
  - serverless-sqs-alarms-plugin

provider:
  name: aws
  runtime: nodejs8.10
  stage: dev
  region: us-east-1
  memorySize: 128
  iamRoleStatements:
  - Effect: Allow
    Action:
      - dynamodb:GetItem
      - dynamodb:PutItem
    Resource: arn:aws:dynamodb:*:*:table/${self:custom.config}
  - Effect: Allow
    Action:
      - lambda:InvokeFunction
    Resource: arn:aws:lambda:*:*:function:${self:custom.process}
  - Effect: Allow
    Action:
      - sqs:ChangeMessageVisibility
      - sqs:ChangeMessageVisibilityBatch
      - sqs:DeleteMessage
      - sqs:DeleteMessageBatch
      - sqs:GetQueueAttributes
      - sqs:GetQueueUrl
      - sqs:ReceiveMessage
      - sqs:SendMessage
      - sqs:SendMessageBatch
    Resource: arn:aws:sqs:*:*:${self:custom.sqs}

custom:
  region: ${self:provider.region}
  stage: ${opt:stage, self:provider.stage}
  prefix: ${self:custom.stage}-${self:service}
  process: ${self:custom.prefix}-process
  config: ${self:custom.prefix}-config
  sns: ${self:custom.prefix}-trigger
  sqs: ${self:custom.prefix}-messages

  sqs-alarms:
    - queue: ${self:custom.sqs}
      topic: ${self:custom.sns}
      thresholds:
        - 1
        - 50
        - 100
        - 500
        - 1000
        - 5000

package:
  exclude:
    - docs/**
    - helpers/**
    - node_modules/**
    - test/**

functions:
  enqueue:
    handler: functions/enqueue.handler
    name: ${self:custom.prefix}-enqueue
    environment:
      config: ${self:custom.config}
      QueueName: ${self:custom.sqs}
    events:
      - http:
          path: enqueue
          method: get

  scale:
    timeout: 10
    handler: functions/scale.handler
    name: ${self:custom.prefix}-scale
    environment:
      config: ${self:custom.config}
    events:
      - sns: ${self:custom.sns}

  worker:
    timeout: 10
    handler: functions/worker.handler
    name: ${self:custom.prefix}-worker
    environment:
      config: ${self:custom.config}
      process: ${self:custom.process}
    events:
      - schedule: rate(1 minute)

  process:
    timeout: 60
    handler: functions/process.handler
    name: ${self:custom.prefix}-process
    environment:
      region: ${self:custom.region}
      sqs: ${self:custom.sqs}

resources:
  Resources:

    Messages:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:custom.sqs}
        MessageRetentionPeriod: 1209600
        VisibilityTimeout: 60
        RedrivePolicy:
          deadLetterTargetArn:
            Fn::GetAtt:
            - MessagesDeadLetterQueue
            - Arn
          maxReceiveCount: 10

    MessagesDeadLetterQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:custom.sqs}-dead-letter-queue
        MessageRetentionPeriod: 1209600

    Config:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.config}
        AttributeDefinitions:
          - AttributeName: key
            AttributeType: S
        KeySchema:
          - AttributeName: key
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5

